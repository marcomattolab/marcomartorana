[{"content":"Frontend Development with Angular (2024) ! üöÄ Speaker: Marco Martorana, Senior Software Developer at ELCA\nEvent: GDG Palermo, December 4, 2024\nIntroduction Overview: Retrospective of Angular framework evolution with personal recommendations and lessons learned. Focus: Simplifying state management with Angular Signals introduced in Angular 16. Evolution of Angular Angular Milestones Angular @2010 - The I Revolution\nIntroduction of Binding Single Page Applications (SPAs) introduced with client-side rendering Challenges addressed: manual synchronization, boilerplate code, and tight coupling. Angular @2016 - The II Revolution\nRewritten in TypeScript. Integration with Reactive Programming using RxJS. Modern Angular @2023 - The III Revolution\nKey Features: Simplification with standalone components. Introduction of Signals, improved server-side rendering (SSR), and lazy loading with @defer. Enhanced hydration for better page load performance. Signals in Angular Definition What are Signals? Signals are wrappers around values that notify consumers of changes.\nWritable Signals: Values can be directly updated. Computed Signals: Derive values based on other signals. Key Benefits:\nImproved performance and optimized DOM updates. Simpler syntax compared to RxJS for state management. Reduced boilerplate code. Native responsiveness without subscriptions. Code Example: Signals vs RxJS Using RxJS for Component State import { Component } from '@angular/core'; import { BehaviorSubject } from 'rxjs'; @Component({ selector: 'app-counter', template: ` \u003ch1\u003eCounter: {{ count$ | async }}\u003c/h1\u003e \u003cbutton (click)=\"increment()\"\u003eIncrement\u003c/button\u003e \u003cbutton (click)=\"decrement()\"\u003eDecrement\u003c/button\u003e \u003cbutton (click)=\"reset()\"\u003eReset\u003c/button\u003e ` }) export class CounterComponent { private countSubject = new BehaviorSubject\u003cnumber\u003e(0); count$ = this.countSubject.asObservable(); increment() { this.countSubject.next(this.countSubject.value + 1); } decrement() { this.countSubject.next(this.countSubject.value - 1); } reset() { this.countSubject.next(0); } } Using Signals for Component State import { Component, signal, computed } from '@angular/core'; @Component({ selector: 'app-counter', template: ` \u003ch1\u003eCounter: {{ count() }}\u003c/h1\u003e \u003cbutton (click)=\"increment()\"\u003eIncrement\u003c/button\u003e \u003cbutton (click)=\"decrement()\"\u003eDecrement\u003c/button\u003e \u003cbutton (click)=\"reset()\"\u003eReset\u003c/button\u003e ` }) export class CounterComponent { count = signal\u003cnumber\u003e(0); parityMessage = computed(() =\u003e this.count() % 2 === 0 ? 'Even' : 'Odd'); increment() { this.count.update(value =\u003e value + 1); } decrement() { this.count.update(value =\u003e value - 1); } reset() { this.count.set(0); } } Best Practices for Modern Angular Use Signals for simple state management. Employ RxJS for complex asynchronous operations. Interoperate between signals and observables for advanced scenarios. Leverage SSR and hydration for improved performance. Follow Angular‚Äôs official roadmap to stay updated. Lessons Learned KIS Principle: Keep it simple is key. Quality Code: Prioritize testing, clean code, and team conventions. AI in Development: Utilize AI tools cautiously for repetitive tasks. Tool Selection: Adapt tools and frameworks to specific project requirements. Slide of the meeting: Pictures about the meeting\n","description":"My presentation about frontend development with Angular, highlighting the powerful new Signals API. Asort of Back to the Future trip talking about the evolution of this framework during the event organized by GDG in Palermo on December 4th 2024.","tags":["newsletter","GDGPalermo","Innovazione","ELCA","Angular","AI","Kubernetes","Sviluppo","Palermo"],"title":"My presentation at GDG Palermo about AngularüöÄ","uri":"/marcomattolab/marcomartorana/meetings/2024/development-with-angular-and-signals/"},{"content":"Evento GDG a Palermo! üöÄ Il 4 dicembre non perderti un evento unico dedicato al futuro dello sviluppo con #Angular, #GenAI e #Kubernetes.\nüìÖ Dettagli evento Quando: Mercoled√¨ 4 dicembre 2024, ore 18:00 - 21:00 Dove: Sede BIP di Palermo üé§ Speaker e sessioni Tra i relatori, ci sar√≤ anche io, Marco Martorana, per ELCA Group con una sessione dal titolo:\nFrontend Development with Angular - Marco Martorana In questo talk, condivider√≤ il mio percorso da sviluppatore frontend, esplorando l‚Äôevoluzione di Angular, il framework di Google che ha rivoluzionato lo sviluppo di applicazioni moderne.\nPartendo dal passaggio fondamentale da JavaScript a TypeScript e dall‚Äôadozione della programmazione reattiva, arriveremo a scoprire le ultime innovazioni introdotte nelle versioni pi√π recenti, come i signals.\nAttraverso aneddoti personali, esempi pratici e best practices maturate in anni di esperienza, cercher√≤ di condividere consigli preziosi per sfruttare al meglio Angular, migliorare la qualit√† del codice e ottimizzare il processo di sviluppo.\nChe siate nuovi al framework o sviluppatori esperti, questo talk fornir√† spunti utili per affrontare con successo le sfide del frontend moderno.\nüöÄ Perch√© partecipare Scopri le ultime novit√† tecnologiche Connettiti con professionisti ed esperti del settore Approfondisci il futuro dello sviluppo software üéüÔ∏è Come partecipare L‚Äôevento √® gratuito, ma la registrazione √® obbligatoria!\nüîó Registrati ora\n","description":"In person Event GDG in Palermo December 2024. GDG is a community-driven event that brings the latest innovations from Google I/O directly to developers worldwide.","tags":["newsletter","GDGPalermo","Innovazione","ELCA","Angular","AI","Kubernetes","Sviluppo","Palermo"],"title":"Evento GDG a Palermo! üöÄ","uri":"/marcomattolab/marcomartorana/meetings/2024/meetings-palermo/"},{"content":"Introduction In the realm of computer science and information and communication technology (ICT), tools that enhance our ability to compute and retrieve information play a crucial role. One such powerful tool is Wolfram Alpha , a computational knowledge engine that has transformed the way we access and interpret data.\nWhat is Wolfram Alpha? Wolfram Alpha is a unique search engine developed by Wolfram Research. Unlike traditional search engines that return a list of web pages, Wolfram Alpha processes queries and computes answers directly. It uses a vast database of curated data and sophisticated algorithms to provide users with factual information and computational results.\nKey Features 1. Computational Power Wolfram Alpha excels in performing complex calculations. Whether you‚Äôre solving mathematical equations, analyzing statistical data, or exploring scientific concepts, Wolfram Alpha can handle it all. The engine is particularly popular among students and professionals for its ability to provide step-by-step solutions.\n2. Wide Range of Topics From mathematics and physics to history and geography, Wolfram Alpha covers a broad spectrum of subjects. Users can ask questions about almost any topic, making it a valuable resource for researchers, educators, and anyone looking to learn something new.\n3. Data Visualization Wolfram Alpha‚Äôs ability to visualize data is one of its standout features. Users can generate plots, graphs, and other visual representations of data, which is especially useful in educational settings. Visual aids can enhance understanding and retention of complex concepts.\n4. Natural Language Processing One of the most impressive aspects of Wolfram Alpha is its natural language processing capabilities. Users can input queries in plain English, and the engine intelligently interprets the question to deliver accurate results. This feature makes it user-friendly, even for those without a technical background.\nApplications in Computer Science and ICT 1. Education Wolfram Alpha is a powerful tool for educators and students alike. It can assist in teaching complex subjects by providing clear explanations, interactive visualizations, and practical examples. In a classroom setting, teachers can use it to illustrate concepts and facilitate discussions.\n2. Research Researchers across various fields can benefit from Wolfram Alpha‚Äôs extensive data repository. It provides access to datasets and computational tools that can aid in analysis and experimentation. This accessibility to information accelerates the research process and fosters innovation.\n3. Software Development For software engineers, Wolfram Alpha can be an invaluable resource. It can be used to prototype algorithms, perform calculations, or even generate data for testing purposes. The API provided by Wolfram Alpha allows developers to integrate its computational power into their applications seamlessly.\nConclusion Wolfram Alpha represents a significant advancement in how we access and interact with information. Its computational capabilities, broad range of topics, and user-friendly interface make it an essential tool in the fields of computer science and ICT. Whether you‚Äôre a student, educator, researcher, or software developer, Wolfram Alpha can enhance your work and expand your knowledge.\nExplore Wolfram Alpha today and see how it can transform your approach to data and computation!\n","description":"Exploring Wolfram Alpha: A Computational Knowledge Engine. Learn how Wolfram Alpha uses natural language processing to provide precise answers and insights across education, research, and software development","tags":["Computer Science","ICT","Wolfram Alpha"],"title":"Exploring Wolfram Alpha, A Computational Knowledge Engine","uri":"/marcomattolab/marcomartorana/post/2020/jan/exploring-wolfram-alpha/"},{"content":"Alternatives to ChatGPT 10 AI Tools to Try Right Now Which AI chatbots are the best to replace ChatGPT? Answering this question requires considering a few factors. ChatGPT is an exceptionally capable AI that can handle a wide range of tasks‚Äîfrom planning vacations to translating text‚Äîand is very user-friendly, a definite advantage.\nIt‚Äôs worth noting that there isn‚Äôt necessarily a single best alternative. ChatGPT remains the most comprehensive chatbot available to the public, so replacing it fully might be challenging. However, based on your specific needs, you can find a tool that suits you best. For instance, someone looking to generate code snippets has different needs than someone focused on translation. Assessing your requirements is key.\n10 AI Chatbot Alternatives to ChatGPT 1. Perplexity AI An interesting hybrid between an AI chatbot and a search engine, Perplexity AI was founded by OpenAI alum Aravind Srinivas. It synthesizes search results to provide more accurate responses than Google, sparing users from manually sifting through URLs to find answers. Perplexity also cites sources, so users can immediately verify the information. Available on both web and app.\nLink: Perplexity AI\n2. Microsoft Copilot (formerly Bing ChatGPT/Bing Chat) Microsoft Copilot, the successor to Bing ChatGPT, combines Bing‚Äôs search engine with conversational AI. Users can ask questions conversationally and receive detailed, interactive answers. It also allows users to report errors in responses and is accessible online, connecting directly to the internet.\nLink: Microsoft Copilot\n3. Gemini (formerly Google Bard) Gemini, Google‚Äôs answer to Microsoft Copilot, performs general web searches, translates texts, summarizes articles, and writes code, similar to ChatGPT. Users can even create custom versions with ‚ÄúGems.‚Äù Available as an Android app.\nLink: Gemini\n4. Claude Developed by Anthropic, Claude specializes in text generation, summarization, and image analysis, capable of reading handwritten notes, graphs, and photos. Claude has both a free version (with daily limits) and a paid plan.\nLink: Claude\n5. Notion AI Notion‚Äôs AI tool enhances work organization, generating text, improving drafts, analyzing meeting notes, and instantly creating next steps. It‚Äôs ideal for project creation and content management and is available for free.\nLink: Notion AI\n6. Copy AI Copy AI is a comprehensive tool perfect for marketers and businesses, with a prompt library supporting a range of tasks‚Äîfrom social media posts to blog content and job ads. Basic use is free, with advanced options available via subscription.\nLink: Copy AI\n7. Codestral by Mistral Developed by Mistral, Codestral is a chatbot specialized in coding tasks. It integrates with Le Chat, allowing easy access to coding support.\nLink: Codestral by Mistral\n8. HuggingChat by Hugging Face The open-source response to ChatGPT from Hugging Face, HuggingChat offers coding, translation, and even recipe suggestions. Users should note it can occasionally ‚Äúhallucinate‚Äù (produce inaccurate information).\nLink: HuggingChat by Hugging Face\n9. Canva‚Äôs Magic Write Known for visual content, Canva now also features Magic Write, a text generator for captions, bios, and creative prompts like poems. Magic Write offers 50 free uses, then requires a subscription.\nLink: Canva‚Äôs Magic Write\n10. HeyGen HeyGen is a unique alternative to ChatGPT, and in some ways even more powerful than OpenAI‚Äôs chatbot, as it can translate and edit videos. HeyGen offers a unique AI for video translation and editing. It can alter videos so speakers appear to speak another language, adjusting mouth movements and cloning voices. Currently available in eight languages, HeyGen is mostly subscription-based, with a free trial option.\nLink: HeyGen\nThese alternatives each offer unique strengths. Whether you need advanced searches, coding help, or project management support, there‚Äôs an AI tool to match your needs.\n","description":"Is ChatGPT Obsolete? Discover the Top 10 Free AI Alternatives","tags":["ai","llm","chat-gpt"],"title":"Alternatives to ChatGPT","uri":"/marcomattolab/marcomartorana/post/2020/jan/alternative-to-chatgpt/"},{"content":"Programming the DJI Tello Drone with Python The DJI Tello is a compact, affordable, and programmable drone ideal for beginners and educators looking to explore the world of drone technology and coding. Equipped with a camera, it offers a variety of features, including video transmission, precise hovering, and basic tricks. Its compatibility with Python enables developers and enthusiasts to create custom behaviors and flight paths, making it an excellent tool for both learning and experimentation.\nIn this article, we‚Äôll dive into how you can get started with programming the DJI Tello in Python, explore available simulators to test code safely, and discuss an advanced topic on matrix drone shows using Tello drones.\nEquipment and Setup To program a DJI Tello drone in Python, you‚Äôll need:\nA DJI Tello drone (standard or Tello EDU version) Python installed on your computer (version 3.6+ recommended) Tello SDK to access Tello‚Äôs programmable features A compatible device (PC, Mac, or mobile device) Wi-Fi connection to connect to the Tello drone Setting up your programming environment involves installing Python, configuring the SDK, and ensuring your device can communicate with the drone over Wi-Fi.\nProgramming the Tello in Python With Python, programming the DJI Tello is straightforward thanks to the Tello SDK, which provides a range of commands for movement, rotations, flips, and even camera control. The SDK is compatible with various Python libraries that allow you to establish a connection, send commands, and receive feedback from the drone.\nFor a simple example, here‚Äôs how you can control your Tello with Python:\nimport socket import time # Tello's IP and Port TELLO_IP = \"192.168.10.1\" TELLO_PORT = 8889 # Connect to Tello sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind(('', 9000)) def send_command(command): sock.sendto(command.encode('utf-8'), (TELLO_IP, TELLO_PORT)) print(f\"Sent: {command}\") send_command(\"command\") # Initiate SDK mode time.sleep(1) send_command(\"takeoff\") # Take off time.sleep(5) send_command(\"land\") # Land This code initiates SDK mode, takes off, hovers for a few seconds, and then lands.\nDrone Simulators for Safe Development Developing with a real drone has inherent risks, especially in indoor environments. Luckily, simulators allow us to test and iterate on our code safely before using it with an actual Tello.\nDroneBlocks Coding Simulator The DroneBlocks Coding Simulator is an excellent online tool to practice programming a Tello without any hardware. Available at DroneBlocks Coding Simulator, it provides a visual interface where you can test code by simulating movements, rotations, and simple flight paths in a virtual environment. The simulator supports block-based coding, making it especially beginner-friendly for those just getting started with drone programming.\nDroneBlocks Tello Simulator For a Python-based simulation, the DroneBlocks Tello Simulator provides a Tello flight simulator that can be run locally. Installable via PyPI, it allows developers to programmatically control a virtual Tello in Python. This is especially useful for those who wish to work directly with Python scripts and Tello SDK commands in a simulated environment that mimics the behavior of a real Tello.\npip install DroneBlocksTelloSimulator After installation, you can run Python commands in this environment, providing a safe way to refine your code.\nAdvanced Topic: Matrix Drone Shows An exciting application of DJI Tello drones is the creation of matrix drone shows, where multiple drones perform coordinated movements to create intricate patterns and displays. This requires advanced programming techniques, such as automatic path generation, collision avoidance, and synchronization of multiple drones.\nA recent study titled ‚ÄúImplementation of Matrix Drone Show Using Automatic Path Generator with DJI Tello Drones‚Äù explores an automatic path generator that allows for creating these synchronized drone shows. By calculating optimal paths and timings, developers can ensure each drone follows a specific route, avoiding mid-air collisions while achieving complex formations.\nTo implement a matrix drone show, you would need to:\nDefine the formation pattern and set the starting positions for each drone. Generate unique paths for each drone, taking into account speed, distance, and synchronization. Use the Tello SDK to send commands to each drone in real time, monitoring progress to maintain the formation. Here‚Äôs an example of how a basic path coordination might look:\n# Assume each Tello has a unique IP address and can be controlled individually drones = [(\"192.168.10.1\", 8889), (\"192.168.10.2\", 8889), (\"192.168.10.3\", 8889)] commands = [\"up 50\", \"forward 100\", \"cw 90\"] # Send commands to all drones for drone in drones: for command in commands: send_command(drone, command) This code could be expanded to allow more complex and simultaneous movements. The research presents a robust approach to coordinate multiple drones, paving the way for impressive aerial displays.\nFinal Considerations Programming the DJI Tello with Python is a rewarding experience, offering insights into both coding and robotics. Whether you‚Äôre learning basic controls or experimenting with coordinated multi-drone shows, the Tello is a flexible platform with ample support for developers of all levels. By leveraging simulators, you can practice and refine your code safely. Advanced applications, like drone shows, showcase the potential of using autonomous drones for synchronized performances and illustrate the future of automated drone displays.\nThe DJI Tello opens doors to creativity and learning, making it a great tool for anyone interested in exploring robotics, automation, or the art of drone programming.\nNext Development: Face recognition with Open CV (AI and machine learning) This repository demonstrates using OpenCV with the TelloEDU mini drone or a computer‚Äôs web camera to perform facial detection and keep track of the number of faces detected at a given time.\nThis repository showcases how to utilize OpenCV for real-time facial detection using the TelloEDU mini drone‚Äôs camera or a computer‚Äôs webcam.\nIt detects faces in the camera stream and draws rectangles around them, along with counting the number of faces detected. The code available on this repository on github Face recognition with Open CV . The repository includes a simple GUI for displaying the video feed and the number of faces detected. Next Development: Enhancing the Matrix Drone System for Automatic Path Generation (Experimental Paper) Download Paper: Implementation_of_Matrix_Drone_URI\nThe advancement of drone technology continues to unfold, particularly in control engineering and design. The Matrix Drone system utilizes the DJI Tello EDU as a cornerstone for further innovations. As previously discussed, the drones are organized into four groups of 25 drones each, connected to a wireless access point, enabling individual command execution for displaying letters or words. The focus now shifts towards enhancing the Automatic Drone Path Generator and optimizing the operational efficiency of the swarm drones.\nSee Reserch Gate Implementation_of_Matrix_Drone_URI\nAutomatic drone path generator The need for an efficient and reliable path generation algorithm is paramount for the successful operation of the Matrix Drone system. This section explores the development of an automatic drone path generator designed to enhance the flight coordination and minimize the risk of collisions. The algorithm will utilize data from the onboard inertial measurement unit and camera for real-time adjustments during flight.\nA. Implementation using Python The path generation algorithm will be implemented using Python, leveraging libraries such as NumPy for numerical calculations and OpenCV for image processing. The drones will continuously communicate their positions and status to the Mission Control Computer (MCC), allowing for dynamic adjustments to their flight paths based on real-time data.\nB. Enhanced Swarm Coordination** To further improve swarm coordination, we will integrate swarm intelligence principles into the path generation process. Each drone will have the capability to assess its surroundings and communicate with neighboring drones, allowing them to adapt their paths collectively. This approach not only optimizes the overall flight performance but also enhances the stability of the swarm in challenging conditions such as strong winds or low light.\nAdvancements in matrix drone system desygn The design of the Matrix Drone system will undergo significant enhancements to accommodate the new path generation capabilities.\nA. Updated Multi Drone Configuration As outlined in the previous design, the MCC will maintain its connection to the drones via the same network. However, with the integration of the automatic path generator, the configuration will evolve to include advanced networking protocols that facilitate more robust communication between the drones and the MCC.\nB. Flight Simulation Enhancements To ensure the new system‚Äôs reliability, extensive simulations will be conducted. These simulations will test the drones‚Äô ability to execute complex flight patterns and respond to dynamic environmental factors. The results will provide valuable insights into potential issues and areas for improvement before real-world implementation.\nTesting and validation Before deploying the enhanced Matrix Drone system, rigorous testing will be essential to validate the functionality of the automatic path generator and the new swarm coordination strategies. Key testing phases will include:\nA. Single Drone Flight Trials Initial tests will involve single drones executing the newly developed path generation algorithm, ensuring that each drone can accurately follow designated paths without external intervention.\nB. Group Flight Simulations Subsequent tests will expand to include group flight simulations, where multiple drones will operate simultaneously, demonstrating the effectiveness of the swarm coordination and path generation in real-time scenarios.\nConslusion The next phase of development for the Matrix Drone system promises to enhance the capabilities of swarm drones through the introduction of an automatic drone path generator and improved swarm coordination strategies. These advancements aim to elevate the operational efficiency of the drones while ensuring a higher level of safety during flight operations. Continuous research and testing will be critical as we strive to realize the full potential of this innovative drone system. We extend our gratitude to our technical team for their support in pushing the boundaries of drone technology.\n","description":"Programming the DJI Tello in Python, explore available simulators to test code safely using Tello drones...","tags":["python","drone","school"],"title":"Programming the DJI Tello Drone with Python (ep. 2)","uri":"/marcomattolab/marcomartorana/post/2020/jan/dji-tello-drone-programming/"},{"content":"Introduction to the DJI Tello Drone ( My Unboxing ) The DJI Tello is a compact, affordable, and beginner-friendly drone developed by Ryze Tech in collaboration with DJI. Designed for both fun and educational purposes, the Tello is perfect for newcomers to drone flying as well as those looking to explore drone programming.\nWith features like a 5MP camera that captures 720p HD video, up to 13 minutes of flight time, and intuitive smartphone controls, the Tello offers an easy entry into the world of drones. Its lightweight design and intelligent flight systems provide stability and ease of use, making it an ideal drone for learning, capturing aerial footage, and experimenting with coding through Scratch.\nWhether you‚Äôre a hobbyist or an educator, the DJI Tello offers an enjoyable and accessible drone experience.\nYouTube privacy enhanced shortcode The youtube shortcode embeds a responsive video player for YouTube videos. Only the ID of the video is required, e.g.:\nYouTube URL:\nhttps://www.youtube.com/watch?v=1xW4HJxnTDM Shortcode:\n{{\u003c youtube 1xW4HJxnTDM \u003e}} Rendered output: https://www.youtube.com/watch?v=1xW4HJxnTDM\n","description":"Drone Tello DJI programmable in Python (unboxing)","tags":["python","drone","school"],"title":"Drone Tello DJI unboxing (ep. 1)","uri":"/marcomattolab/marcomartorana/post/2020/jan/dji-tello-drone-unboxing/"},{"content":"Evento GDG Gela 2024 üåê Siamo entusiasti di annunciare un evento straordinario organizzato da Google Developer Group Gela, che si terr√† il 2 agosto 2024 presso lo storico Palazzo Tortorici a Mazzarino. Una giornata dedicata a esplorare le frontiere dello sviluppo tecnologico e dell‚Äôinnovazione digitale.\nüìÖ Dettagli dell‚Äôevento Data: Venerd√¨ 2 Agosto 2024 Orario: TBD Luogo: Palazzo Tortorici, Mazzarino üé§ Speaker L‚Äôevento vedr√† la partecipazione di 7 speaker nazionali e internazionali, esperti in diversi settori tecnologici, tra cui:\nLuca Alessi Luciano d‚ÄôAlessandra Salvatore Rotolo Nicola Palmeri Marco Martorana Giorgio Basile üîë Temi principali Durante la giornata si discuter√† di:\nSviluppo web Integrazione delle tecnologie AI Realt√† virtuale e aumentata per abbattere barriere sensoriali e cognitive Remote working e restanza, per ripensare il lavoro e l‚Äôimprenditoria digitale ‚Ä¶e molto altro ancora! üéüÔ∏è Prenotazione L‚Äôingresso √® gratuito, ma √® necessaria la prenotazione.\nPrenota ora il tuo posto\nNon perdere questa occasione unica per connetterti con professionisti ed esperti del settore, ampliare le tue competenze e scoprire le ultime innovazioni tecnologiche! üöÄ\nHashtag:\n#GDGGela #Innovazione #AI #Realt√†Aumentata #WebDevelopment #ImprenditoriaDigitale #Mazzarino\n","description":"In preson Event GDG in Mazzarino August 2024. GDG is a community-driven event that brings the latest innovations from Google I/O directly to developers worldwide.","tags":["newsletter","GDG","Innovazione","Angular","Sviluppo","AI","RealtaAumentata","ImprenditoriaDigitale","Mazzarino","Gela"],"title":"Google I/O Extended (Mazzarino - Gela)","uri":"/marcomattolab/marcomartorana/meetings/2024/meetings-mazzarino/"},{"content":"In the world of project management, effectively managing priorities is crucial for the success of any project.\nWhether launching a new software product, implementing a marketing campaign, or coordinating a large corporate initiative, knowing how to correctly set priorities can make the difference between success and failure.\nIn this article, we will explore some fundamental guidelines for managing project priorities, based on key project management principles.\nDefine Key Project Objectives\nFirst and foremost, it‚Äôs crucial to have a clear understanding of the project‚Äôs objectives. This means knowing exactly what you want to achieve, the expected outcomes, and how these contribute to the organization‚Äôs strategic goals.\nObjectives should be SMART: Specific, Measurable, Achievable, Realistic, and Time-bound.\nOnce these objectives are established, it will be easier to align priorities and ensure that every activity contributes to achieving these goals.\nEvaluate and Classify Activities\nOnce objectives are defined, it‚Äôs necessary to list all the activities required to achieve them. This step involves a detailed breakdown of the project into specific tasks. Subsequently, each activity must be evaluated and classified based on its importance and urgency. A useful method for this is the Eisenhower Matrix, which divides tasks into four categories:\nImportant and Urgent: To be done immediately. Important but Not Urgent: To be scheduled. Not Important but Urgent: To be delegated. Not Important and Not Urgent: To be eliminated. Create a Detailed Project Plan\nWith a list of prioritized activities, the next step is to create a detailed project plan. This plan should include timelines, required resources, and the roles and responsibilities of team members.\nTools like Gantt charts or project management software (e.g., Trello, or Microsoft Project) can be extremely useful for visualizing and tracking project progress.\nAllocate Resources Strategically\nResource management is a key element in priority management. It‚Äôs crucial to ensure that resources ‚Äì both human and material ‚Äì are allocated effectively. This means assigning the right resources to the right tasks at the right time, avoiding work overloads and bottlenecks. Resource management should be flexible to adapt to changes and emergencies that may arise during the project.\nMonitor and Reevaluate Priorities\nTask priorities can change over the course of the project. Therefore, it‚Äôs important to continuously monitor progress and be ready to reevaluate and reorganize priorities based on new information or changes in the project context.\nRegular update meetings and project status reviews are essential to keep the team aligned and to make necessary adjustments.\nEffective Communication\nClear and continuous communication is vital for managing priorities. All team members need to be aware of the project‚Äôs priorities and how their individual tasks fit into the overall picture.\nUsing internal communication tools like Slack or Microsoft Teams and holding regular meetings can help ensure that everyone is informed and aligned.\nManage Stakeholder Expectations\nIt‚Äôs essential to manage stakeholder expectations. This includes not only informing stakeholders about project progress but also ensuring they are aware of priorities and any changes.\nProactive management of expectations can prevent misunderstandings and ensure continuous stakeholder support throughout the project lifecycle.\nTechniques for Individual Priority Management More specifically I describe below techniques for individual priority management used ideally in the daily work-life not only by a project manager.\nEisenhower Matrix The Eisenhower Matrix used for deciding what to do and when to do it, it has been described above but here we divided the same four tasks into diverse categories to focus on the appropriate action.\nImportant and Urgent: Do it immediately. Important but Not Urgent: Schedule it. Not Important but Urgent: Delegate it. Not Important and Not Urgent: Eliminate it. This technique helps focus on tasks that truly matter, minimizing distractions.\n2. 3‚Äì3‚Äì3 Method\nProposed by Oliver Burkeman, this method involves planning the day to include:\n3 hours of deep work on an important project. 3 urgent tasks like crucial meetings, emails, and to-dos. 3 maintenance tasks for a smoother life. This approach balances the need for deep concentration and the management of daily tasks.\n3. Time Blocking\nSuggested by Cal Newport and Nir Eyal, Time Blocking involves:\nDividing your calendar into specific time blocks. Scheduling specific tasks within these blocks. Focusing only on one task during the assigned block. Techniques for Team Priority Management\nABCDE Method This method suggests classifying team tasks based on the consequences of not doing them:\nA: Highest priority, severe consequences if not done. B: Important but minor consequences. C: Nice to do, no consequences if undone. D: Delegate if possible. E: Eliminate entirely. This approach ensures that critical tasks receive the necessary attention.\n2. MoSCoW Method\nThe MoSCoW method categorizes tasks into:\nMust Have: Crucial for success. Should Have: Important but not vital. Could Have: Nice to have but not essential. Won‚Äôt Have: Out of scope. This technique helps focus resources on essential tasks for the project.\n3. Kanban Board\nKanban is a visual method for managing workflow. It involves organizing tasks into three columns:\nTo Do Doing Done This visualization facilitates prioritization coordination and enhances team collaboration.\nTechniques for Leadership Priority Management\nWarren Buffett 25/5 Rule Warren Buffett suggests:\nMaking a list of your top 25 initiatives.\nRanking them by importance. Focusing on the top 5. Ignoring the rest. This method ensures that attention is dedicated to the most important initiatives.\n2. Pareto Principle\nThe Pareto Principle, or the 80/20 rule, indicates that 80% of results come from 20% of efforts.\nBy identifying and focusing on this 20%, leaders can maximize impact with less effort.\n3. Theory of Constraints\nThis theory involves:\nIdentifying system constraints. Optimizing them. Synchronizing the rest of the system around these constraints. For continuous improvement it is recommended to repeat this process to achieve new better results.\nConclusion Setting and managing priorities effectively is a crucial skill not only for a project manager but also for each team member. By following these guidelines, you can ensure that resources are used optimally, critical tasks are addressed promptly, and the project progresses smoothly towards achieving its objectives.\nThe key is to maintain a flexible approach, communicate clearly, and continuously monitor progress, adapting to changes and new challenges along the way.\n","description":"How to Manage Priorities in Project Management: Essential Guidelines","tags":["project-management"],"title":"How to Manage Priorities in Project Management","uri":"/marcomattolab/marcomartorana/post/2020/jan/pmp-priority/"},{"content":"Once upon a time, in the vast world of web development, there was a tool that promised to bring structure and efficiency to the chaotic realm of JavaScript. This tool was AngularJS, the first version of the Angular framework. As a young developer setting foot into the industry, I witnessed the birth of AngularJS and its transformative impact on frontend development.\nChapter 1: AngularJS (1.x) ‚Äî The Pioneer AngularJS emerged in 2010, introducing the concept of two-way data binding. This meant that changes in the user interface instantly reflected in the application logic and vice versa. It was a game-changer, making dynamic web applications more manageable. But as projects grew larger, AngularJS revealed its limitations. The framework lacked modularity and suffered from performance issues.\nChapter 2: Angular 2 ‚Äî The Rebirth In 2016, a major overhaul occurred with the release of Angular 2. The framework was rewritten from scratch, embracing TypeScript and introducing a component-based architecture. This shift allowed for greater modularity and scalability. Developers had to bid farewell to controllers and embrace a more declarative approach for building components. The introduction of the Angular CLI simplified project setup and maintenance.\nChapter 3: Angular 4/5/6 ‚Äî The Streamlined Journey The framework‚Äôs developers decided to skip version 3 and instead directly release version 4.0. So Angular continued to evolve rapidly, with versions 4, 5, and 6 introducing incremental improvements and optimizations. The Angular team adopted Semantic Versioning, promising backward compatibility with each update. These versions focused on reducing bundle sizes, enhancing the Angular CLI, and improving the overall developer experience.\nChapter 4: Angular 7/8 ‚Äî The Ivy Revolution In 2018, Angular 7 arrived with a significant performance boost and new features. However, it was Angular 8 that laid the foundation for the revolutionary Ivy renderer. Ivy was a complete rewrite of the Angular rendering engine, promising smaller bundle sizes, faster compilation, and improved tree-shaking. It was a game-changer, making Angular applications more efficient and responsive.\nChapter 5: Angular 9/10/11 ‚Äî The Maturation Process The subsequent versions of Angular focused on refining the framework. Angular 9 introduced the Ivy compiler as the default, bringing smaller bundle sizes and improved developer tooling. Version 10 focused on performance enhancements while Angular 11 brought stricter types, improved debugging and better styling support.\nChapter 6: Angular 12/13/14 ‚Äî Keeping Pace Angular continued its steady evolution, with versions 12, 13, and 14 introducing updates to the Angular CLI, improvements in the Ivy engine, and enhanced developer tooling. The community grew stronger, and Angular became a reliable choice for building large-scale applications.\nChapter 7: Angular 15/16 ‚Äî Navigating Maturity As the Angular framework continued its evolutionary journey, versions 15 and 16 marked a pivotal phase in its development. Angular 15 brought forth refinements to the Ivy renderer, further optimizing performance and addressing compatibility issues. The Angular team focused on fine-tuning the developer experience, streamlining workflows, and introducing enhancements to the Angular Material library. Developers found themselves navigating a landscape of improved tooling and a more mature ecosystem.\nIn Angular 16, the community witnessed a concerted effort to modernize the framework. The Angular CLI received updates to align with the latest industry standards, and the Ivy renderer continued to evolve, promising even more efficient bundle sizes and faster rendering. The Angular team embraced the latest JavaScript features, making it easier for developers to write clean and concise code.\nWith versions 15 and 16, Angular solidified its position as a reliable choice for building sophisticated applications. The framework‚Äôs commitment to stability, performance, and a thriving community underscored its importance in the rapidly evolving world of web development.\nChapter 8: Angular 17/18 ‚Äî The Modernization Culmination In the ever-changing landscape of frontend development, Angular 18 emerged as the culmination of a journey marked by continuous improvement and innovation. This version of the framework brought with it a renewed focus on modernization, reinforcing Angular‚Äôs standing as a powerhouse for building robust web applications.\nAngular 18 prioritized simplicity and performance, introducing enhancements that significantly improved the developer experience. The Angular team embraced the latest ECMAScript features, delivered unparalleled efficiency in terms of bundle sizes and rendering speed.\nA part of these, Angular introduced a lot of new changes, a new logo and a new documentation page for developers: https://angular.dev/. So this seems like a second revolution about the framework. Regarding these new features we can found the introduction of a declarative control flow mechanism marks a paradigm shift in how we manage templates.\nAnother important thing that has been requested for some time is the lazy loading of specific elements or complete components. In this Angular version has been introduced the Deferred Loading Block mechanism. Indeed, now defer can be used to delay the loading of components in response to different user interactions (mouse over, click and so on).\nAnother important thing that was introduced with Angular 16 and keept in 17 and 18 were Signals are a new feature that tracks changes in a variable‚Äôs value and notifies us reactively when a change occurs. According to the Angular documentation, signals provides ‚Äúa system that granularly tracks how and where your state is used throughout an application, allowing the framework to optimize rendering updates‚Äù. In other words, it‚Äôs a way to manage state in the application in a way that allows Angular to react to changes in the most effective way possible.\nVersion History Last but not least, Angular with these versions introduced also standalone. Standalone Components, which are one of the most interesting innovations in the Angular ecosystem in recent years trying to simplify the organization of an Angular project for new joiners without modules. These are just some of relevant news introduced with the modern Angular but we could go forward with introduction of Server Side Rendering SSR on the architectural point of view. The Angular team with these versions trying to extend, simplify and improve the performance of the framework (embracing Signal instead of RxJS for simple use cases) and definitely trying to substitute some external libraries.\nAnd so, the story of Angular continues with each chapter unveiling new possibilities and setting the stage for the future of frontend development. I think that we have another revolution with the modern Angular (an Angular 3.0) with the aim of returning to the top of the most used frontend frameworks.\nTips: Upgrade Angular version Some steps are typically required when updating to a new major version of Angular. You may need to run update scripts, refactor code, run additional tests, and learn new APIs. The Angular website includes an interactive Angular Update Guide that lets you input your project specifics, and then produces a detailed list of instructions.\n","description":"Coding Chronicles: The Evolution of Angular - A Frontend Developer‚Äôs Journey from AngularJS to Modern Angular","tags":["angular","programming"],"title":"The Evolution of Angular","uri":"/marcomattolab/marcomartorana/post/2020/jan/evolution-of-angular/"},{"content":"Visualizing Algorithms: Key Tools and Techniques for Enhanced Understanding Visualizing how an algorithm works can significantly enhance comprehension and facilitate the learning process. Several tools and techniques are available to help both beginners and experts understand algorithms through visual representation. Here are a few notable tools:\n1. Flowcharts Flowcharts are a traditional and straightforward way to represent the steps of an algorithm. They use different shapes to denote different types of actions or steps, such as processes, decisions, and inputs/outputs, connected by arrows indicating the flow of control.\nFollowing tools make creating flowcharts simple and intuitive: Draw.IO Visual Paradigm Google Drawing Lucidchart Miro\n2. Algorithm Animation Tools Algorithm animation tools dynamically show the execution of an algorithm step-by-step, often highlighting changes in data structures. These tools can be particularly effective for demonstrating complex algorithms.\nExamples include:\nVisualgo: An educational tool that provides visualizations for numerous data structures and algorithms. AlgoViz: A repository and search engine for algorithm visualizations. 3. Code Visualization Platforms Platforms like Python Tutor allow users to step through code execution line by line, making it easier to understand how the algorithm processes data. This is particularly useful for debugging and learning programming concepts.\nAnother library like Algorithm Visualizer allow users to step through code execution line by line and visualize for diverse programming languages (JavaScript, Java, C++) how an algorithm it works ( Sorting, Recursive, Divide and Conquer, Dynamic Programming and so on).\n4. Interactive Coding Environments Interactive coding environments, such as Jupyter Notebooks, support the integration of code execution and visualization within a single document.\nBy using libraries like Matplotlib or Plotly, users can create visual representations of data structures and the steps of algorithms.\n5. Graphical Tools for Specific Algorithms Certain tools are designed to visualize specific types of algorithms. For example:\nD3.js: A JavaScript library for producing dynamic, interactive data visualizations in web browsers. It can be used to create intricate visual representations of algorithms, especially those involving graphs and networks. Gephi: An open-source network analysis and visualization software often used for visualizing graph algorithms. 6. Educational Software and Apps There are numerous educational apps designed to teach algorithms through visualization and interaction. Examples include:\nFunny\nCodeCombat: An educational game that teaches programming and algorithmic thinking through interactive gameplay. Blockly Games: A series of educational games that teach programming using Google‚Äôs Blockly library, which involves snapping together blocks to form code. These games introduce loops, conditionals, and other algorithmic concepts. Scratch: Developed by MIT, Scratch is a visual programming language aimed at children. It allows users to create programs by snapping together code blocks, making it easier to learn fundamental programming concepts and algorithms. LightBot: A puzzle game that teaches programming logic through fun gameplay. Players control a robot to navigate levels using commands that represent programming structures, helping to understand algorithms and problem-solving. CodinGame: Combines coding challenges with games. It allows users to solve algorithmic puzzles by writing code, providing instant feedback and visualization. SoloLearn: An app that offers courses in various programming languages, including interactive lessons on algorithms. Users can write and test code within the app and engage with a community of learners. Advanced\nW3Schools: A popular online resource for learning web development, offering tutorials, references, and examples for HTML, CSS, JavaScript, and other web technologies. It‚Äôs a convenient resource for quick answers and learning new concepts. ThinkerCAD: An online platform for teaching and learning electronics and programming. It offers interactive simulations and tutorials for building circuits and programming Arduino boards, providing hands-on experience with hardware and software development. freeCodeCamp: An interactive learning platform that offers free courses in web development, including HTML, CSS, JavaScript, and more. It provides hands-on projects and coding challenges to reinforce learning and build practical skills. Mozilla Developer Network (MDN) Web Docs: A comprehensive resource for web developers, offering documentation, tutorials, and guides on web technologies such as HTML, CSS, JavaScript, and web APIs. It‚Äôs a valuable reference for both beginners and experienced developers. Conclusion By leveraging these tools, learners can gain deeper insights into how algorithms work and enhance their ability to design efficient algorithms. Whether through static flowcharts or dynamic interactive environments, visualizing algorithms transforms abstract concepts into tangible, understandable processes.\nWhether you prefer the static charm of flowcharts or the dynamic pizzazz of interactive setups, visualizing algorithms turns the abstract into a whimsical dance of ones and zeroes!\n","description":"Visualizing Algorithms: Key Tools and Techniques for Enhanced Understanding...","tags":["programming","school"],"title":"Visualizing Algorithms","uri":"/marcomattolab/marcomartorana/post/2020/jan/visualize-algorithms/"},{"content":"Angular, developed by Google, is a powerful framework for dynamic programming of Single Page Application based on TypeScript .\nIt is a structured framework not a simple library such as React, so developers have to ‚Äúthink‚Äù like Angular. Behind the scene, it uses a lot of building blocks: modules, components, data binding, services, directives, and more. This story want to highlight Angular‚Äôs best practices for optimal implementation following simple rules\nThese rules are a starting point for novice developers in order to work with a well-done Angular project. You have to consider that this framework is complex and has a high learning curve, so these best practices want to guide developers to create more maintainable and scalable Angular applications.\nIn the article I‚Äôve written, each of the 20 rules is explained thoroughly, covering the ‚Äòwhat‚Äô (the rule itself), ‚Äòwhy‚Äô (its importance), and ‚Äòhow‚Äô (implementing it).\nFor a visual representation, check out this picture featuring Superman, to grasp these concepts visually and make them as powerful as a superhero‚Äôs abilities.\n1. Use Angular CLI for Project Setup What: Always use Angular CLI to create and manage your Angular projects.\nWhy: Angular CLI provides a standard and efficient way to bootstrap, develop, test, and deploy Angular applications.\nHow:\n# Install Angular CLI globally (if not already installed) npm install -g @angular/cli # Create a new Angular project ng new my-angular-app # Navigate to the project directory cd my-angular-app # Generate a component ng generate component my-component # Run the development server ng serve 2. Follow the Single Responsibility Principle (SRP) What: Each component, service, or module should have a single responsibility.\nWhy: SRP promotes maintainability, readability, and reusability of code. It makes your codebase easier to understand and debug.\nHow:\n// Example of a component with a single responsibility import { Component } from '@angular/core'; @Component({ selector: 'app-user', template: '\u003cdiv\u003e{{ user.name }}\u003c/div\u003e', }) export class UserComponent { user = { name: 'Marco Martorana' }; } 3. Optimize Performance with OnPush Change Detection What: Use ChangeDetectionStrategy.OnPush to optimize change detection in components.\nWhy: OnPush change detection reduces the number of checks and enhances performance, especially in large applications.\nHow:\nimport { Component, ChangeDetectionStrategy } from '@angular/core'; @Component({ selector: 'app-user', template: '\u003cdiv\u003e{{ user.name }}\u003c/div\u003e', changeDetection: ChangeDetectionStrategy.OnPush, }) export class UserComponent { user = { name: 'Marco Martorana' }; } 4. Use Reactive Forms What: Utilize Angular Reactive Forms with form validation.\nWhy: Angular provides two different kind of forms: Template Driven Forms and Reactive forms. A Reactive Form provides a more predictable and manageable way to handle form data, including validation and asynchronous operations. Furthermore Angular framework uses RxJS library so it based on reactive programming and Reactive forms leverage this.\nHow:\nimport { Component } from '@angular/core'; import { FormBuilder, FormGroup, Validators } from '@angular/forms'; @Component({ selector: 'app-registration', template: ` \u003cform [formGroup]=\"registrationForm\" (ngSubmit)=\"onSubmit()\"\u003e \u003cinput formControlName=\"username\" placeholder=\"Username\" /\u003e \u003cbutton type=\"submit\" [disabled]=\"registrationForm.invalid\"\u003eRegister\u003c/button\u003e \u003c/form\u003e `, }) export class RegistrationComponent { registrationForm: FormGroup; constructor(private fb: FormBuilder) { this.registrationForm = this.fb.group({ username: ['', [Validators.required, Validators.minLength(5)]], }); } onSubmit() { // Manage submission here } } 5. Lazy Load Modules What: Implement lazy loading for feature modules to load them on-demand.\nWhy: Lazy loading reduces the initial bundle size and speeds up the application‚Äôs initial loading time. This modularization improve performance and let to have a better application structure following a division by domain entities.\nHow:\nimport { NgModule } from '@angular/core'; import { RouterModule, Routes } from '@angular/router'; const routes: Routes = [ { path: 'dashboard', loadChildren: () =\u003e import('./dashboard/dashboard.module').then(m =\u003e m.DashboardModule), }, // Other routes... ]; @NgModule({ imports: [RouterModule.forRoot(routes)], exports: [RouterModule], }) export class AppRoutingModule { } 6. Use TrackBy with ngFor Directive What: Provide a function for trackBy in ngFor loops.\nWhy: Optimizes rendering performance for lists.\nHow:\n// In component trackByFn(index: number, item: any): number { return item.id; } \u003c!-- In template --\u003e \u003cdiv *ngFor=\"let item of items; trackBy: trackByFn\"\u003e{{ item.name }}\u003c/div\u003e 7. Document Code What: Add meaningful comments and document your code.\nWhy: Improves code readability and helps other developers understand your code.\nHow:\n/** * This is an sample function that print a message in console and return length of input parameter. * @param {string} param - Description of the parameter. * @returns {number} Description of the return value. */ function helloFunction(name: string): number { // Function logic here console.log(`Hello ${name} length: ${name.length}`); return name.length; } Plus: In order to generate documentation of your Angular project can be used this tool Compodoc\n8. Use Async Pipe for Observables What: Use the async pipe to subscribe to observables in templates.\nWhy: Automatically manages subscriptions and avoids memory leaks.\nHow:\n// In component data$: Observable\u003cData\u003e; \u003c!-- In template --\u003e \u003cdiv *ngIf=\"data$ | async as data\"\u003e{{ data }}\u003c/div\u003e 9. Follow the Angular Style Guide What: Adhere to the official Angular style guide for consistent coding standards.\nWhy: Consistency improves readability and maintainability.\nHow:\n// Bad function myComponent() {} // Good export class MyComponent {} 10. Use Angular Services for Business Logic What: Place business logic in Angular services, not components.\nWhy: Separation of concerns and reusability of logic.\nHow:\n@Injectable({ providedIn: 'root', }) export class MyService { getData(): Observable\u003cData\u003e { // Write Service logic (business logic) here } } @Component({ selector: 'app-my-component', templateUrl: 'my-component.component.html', }) export class MyComponent { currentValue: Data; constructor(private myService: MyService) { myService.getData().subscribe(v =\u003e { this.currentValue = v; }); } } 11. Use Lifecycle Hooks What: Angular provides lifecycle hooks to manage component behavior at key points. Use hooks like ngOnInit, ngOnChanges, and ngOnDestroy and so on appropriately. See Angular lifecycle-hooks.\nWhy: Proper use of lifecycle hooks ensures efficient component initialization, change detection, and cleanup.\nHow:\nimport { Component, OnInit, OnDestroy } from '@angular/core'; @Component({ selector: 'app-example', template: '...', }) export class ExampleComponent implements OnInit, OnDestroy { constructor(){} ngOnInit() { // Initialization logic here } ngOnDestroy() { // Cleanup logic here } } 12. Follow Proper Subscription/Unsubscription Patterns What: Avoid memory leaks by unsubscribing from observables when components are destroyed.\nWhy: Unsubscribing prevents lingering subscriptions, which can lead to memory leaks and unexpected behavior.\nHow:\nimport { Component, OnDestroy } from '@angular/core'; import { Subscription } from 'rxjs'; @Component({ selector: 'app-example', template: '...', }) export class ExampleComponent implements OnInit, OnDestroy { private subscription: Subscription; constructor(private dataService: DataService) { } ngOnInit() { this.subscription = this.dataService.getData().subscribe(data =\u003e { // Handle data }); } ngOnDestroy() { this.subscription.unsubscribe(); } } 13. Prefer interfaces over ‚Äúany‚Äù type What: Use interfaces to define the shape of objects rather than using the ‚Äòany‚Äô type.\nWhy: Interfaces provide type safety, better code readability. Writing with our preferred IDE (VSCode, IntelliJ Idea or other) we are ‚Äúguided‚Äù during development. Furthermore we are using Angular, which is based on Typescript that support Object-Oriented Programming. OOP provides a way to organize code and create reusable and modular software applications. To do that we have inheritance, encapsulation and polymorphism, but first of all we have data types. So why don‚Äôt use them properly instead of use any?\nHow:\ninterface User { id: number; name: string; } function getUserInfo(user: User): string { // Access user properties safely return user.name + \" (\" + user.id + \")\"; } 14. Code Consistency and Style What: Follow a consistent coding style and adhere to the Angular style guide.\nWhy: Consistent code enhances readability and collaboration among developers.\nHow:\nUse a linter like ESLint or TSLint to enforce coding standards. Follow the Angular style guide: https://angular.io/guide/styleguide 15. Unit testing and e2e testing What: Write unit tests using tools like Jasmine and Karma. Perform end-to-end testing using a specific tool for e2e such as Cypress.\nWhy: Testing ensures code reliability, catches bugs early, and facilitates future code changes.\nNote: About e2e tests we are in the border territory of the framework compared to purely QA territory. Furthermore, there are diverse tools such as Protractor, Cypress, Selenium and others with advantages and disadvantages and also several considerations to make (maybe in a separeted Post).\nHow (Unit test):\n// example.component.spec.ts describe('ExampleComponent', () =\u003e { it('should create', () =\u003e { const component = new ExampleComponent(); expect(component).toBeTruthy(); }); }); How (e2e test):\n// example.e2e-spec.ts describe('Example App', () =\u003e { it('should display welcome message', () =\u003e { cy.visit('/'); cy.get('app-root').contains('Welcome to your Angular App!'); }); }); 16. Utilize RxJS Operators Effectively What: RxJS operators like map, filter, and mergeMap transform and manipulate observables efficiently.\nWhy: Operators simplify complex asynchronous operations, making code concise and readable.\nHow:\nimport { from } from 'rxjs'; import { map, filter } from 'rxjs/operators'; const numbers = from([1, 2, 3, 4, 5]); numbers.pipe( filter(num =\u003e num % 2 === 0), // Filters even numbers map(num =\u003e num * 2) // Doubles the filtered numbers ).subscribe(result =\u003e { console.log(result); // Output: 4, 8 }); import { Observable } from 'rxjs'; import { map, filter } from 'rxjs/operators'; // Example using map and filter operators observable.pipe( filter(data =\u003e data !== null), // Filter out null values map(data =\u003e data.property), // Extract a specific property ).subscribe(transformedData =\u003e { // Process transformed data }); 17: Avoid Nested Subscriptions What: Avoid subscribing inside another subscription to prevent callback hell and improve code readability.\nWhy: Nested subscriptions can lead to difficult-to-maintain code, known as the ‚Äúpyramid of doom.‚Äù It can also cause memory leaks if not properly managed.\nHow:\nimport { Observable } from 'rxjs'; import { switchMap } from 'rxjs/operators'; // Bad Practice (Nested Subscriptions) observable1.subscribe(data1 =\u003e { observable2.subscribe(data2 =\u003e { // Process data }); }); // Good Practice (Using switchMap) observable1.pipe( switchMap(data1 =\u003e { return observable2; }) ).subscribe(data2 =\u003e { // Process data }); 18: Reuse Components What: Create reusable components to encapsulate specific functionalities and UI elements.\nWhy: Reusing components enhances maintainability, reduces duplication, and improves the overall consistency of the application.\nHow:\n// Reusable Component (Example) @Component({ selector: 'app-custom-button', template: '\u003cbutton\u003e{{label}}\u003c/button\u003e' }) export class CustomButtonComponent { @Input() label: string; // Component logic and methods } // Implementation in Parent Component \u003capp-custom-button [label]=\"'Click me'\"\u003e\u003c/app-custom-button\u003e 19: Leverage Higher-Order Mapping Operators What: Use higher-order mapping operators like mergeMap, concatMap, or exhaustMap based on specific use cases.\nWhy: Higher-order mapping operators allow you to manage concurrency and handle observable emissions in a controlled manner, preventing issues like race conditions.\nHow:\nimport { Observable, from } from 'rxjs'; import { mergeMap } from 'rxjs/operators'; // Using mergeMap to handle concurrent requests observable.pipe( mergeMap(data =\u003e { return from(someAsyncOperation(data)); }) ).subscribe(result =\u003e { // Process the merged result }); 20: Use TakeUntil with Subject for Manual Unsubscription What: Use async pipe when possible (this is suggested by Angular). When you cannot use sync pipe than use the takeUntil operator along with a Subject to manually unsubscribe from observables.\nWhy: takeUntil operator allows you to unsubscribe from observables when a specific event (controlled by the Subject) occurs, preventing memory leaks.\nimport { Component, OnDestroy } from '@angular/core'; import { Subject } from 'rxjs'; import { takeUntil } from 'rxjs/operators'; @Component({ selector: 'app-example', template: 'Example Component' }) export class ExampleComponent implements OnDestroy { private unsubscribe$: Subject\u003cvoid\u003e = new Subject\u003cvoid\u003e(); constructor(private dataService: DataService) { this.dataService.getData() .pipe(takeUntil(this.unsubscribe$)) .subscribe(data =\u003e { // Handle data }); } ngOnDestroy() { this.unsubscribe$.next(); this.unsubscribe$.complete(); } } By following these best practices, Angular developers can create more efficient, readable and maintainable code while taking advantage of the powerful features provided by RxJS.\n","description":"In the article 20 Angular Best practices covering the What, Why and How: the rule itself, its importance and how implementing it.","tags":["angular","best-practice","programming"],"title":"Angular Best Practice 2023","uri":"/marcomattolab/marcomartorana/post/2020/jan/angular-best-practices/"},{"content":"10 Javascript hacks to speedup development Javascript, an omnipresent force in modern web development, empowers developers with its versatility. At the same time as developers, our perpetual quest for ingenious tips and techniques to use for amplifying our productivity and for crafting efficient code is a constant.\nTo satisfay this in the following article a list of tricks. Each of the 10 tricks is explained thoroughly, covering the ‚Äòwhat‚Äô (the rule itself), ‚Äòwhy‚Äô (its importance), and ‚Äòhow‚Äô (implementing it).\nFor a visual representation, check out this picture featuring a superhero, to grasp these concepts visually and make them as powerful as a superhero‚Äôs abilities. Let‚Äôs delve into the enchanting world of JavaScript wizardry!\n1. Destructuring Assignment What: Destructuring assignment allows the extraction of values from arrays or objects with a concise syntax, fostering cleaner and more readable code.\nWhy: Enhances code clarity, particularly when handling intricate data structures.\nHow: Replaces traditional variable assignments with direct extraction of specific values.\n// Traditional variable assignment const data = { name: 'John', age: 30 }; const name = data.name; const age = data.age; // Destructuring assignment const { name, age } = data; 2. Spread Operator What: The spread operator (three dots: ‚Ä¶ ) enables the expansion of arrays, objects, or function arguments into separate elements. It is used also for shallow copy of an array.\nWhy: It is invaluable for tasks like array merging, object cloning, or dynamically passing multiple arguments to a function, reducing code verbosity.\nHow: These examples shows the spread syntax for creating shallow copies of arrays and objects, providing a concise and effective way to duplicate data structures and also for seamless data manipulation.\n// Without spread syntax const arr1 = [1, 2, 3]; const arr2 = [4, 5, 6]; const mergedArray = arr1.concat(arr2); // With spread syntax const mergedArray = [...arr1, ...arr2]; // Shallow copy of an array using spread syntax const originalArray = [1, 2, 3]; const copiedArray = [...originalArray]; // Modify the copied array without affecting the original copiedArray.push(4); console.log('Original Array:', originalArray); // [1, 2, 3] console.log('Copied Array:', copiedArray); // [1, 2, 3, 4] // Shallow copy of an object using spread syntax const originalObject = { name: 'John', age: 30 }; const copiedObject = { ...originalObject }; // Modify the copied object without affecting the original copiedObject.city = 'New York'; console.log('Original Object:', originalObject); // { name: 'John', age: 30 } console.log('Copied Object:', copiedObject); // { name: 'John', age: 30, city: 'New York' } 3. Optional Chaining What: Optional chaining (?.) is an operator , called also ‚Äòelvis‚Äô operator, gracefully handles nested property or method access, preventing errors in situations where properties or methods may be undefined or null.\nWhy: Mitigates the need for long if statements, resulting in more concise and robust code.\nHow: Employ optional chaining to navigate through object structures with ease.\n// Without optional chaining const street = user.address \u0026\u0026 user.address.street; // With optional chaining const street = user.address?.street; 4. Nullish Coalescing Operator What: The nullish coalescing operator (??) offers a concise way to assign default values when a variable is null or undefined.\nWhy: Particularly useful for eliminating tedious null checks in conditional expressions or when retrieving object values.\nHow: Streamline code by incorporating the nullish coalescing operator in conditional expressions.\n// Without nullish coalescing operator const username = user.username || 'Guest'; // With nullish coalescing operator const username = user.username ?? 'Guest'; 5. Promises and Async/Await What: Promises and the Async/Await are indispensable for managing asynchronous operations in JavaScript.\nWhy: Promises provide a structured approach for handling asynchronous tasks, allowing developers to work with a clear chain of logic using .then() and .catch(). Async/Await, built on top of Promises, offers a more synchronous-like syntax for handling asynchronous code.\nHow: The first snippet demonstrates data fetching using Promises, while the second uses Async/Await. Both way contribute to a more structured and readable approach to handling asynchronous tasks in JavaScript.\nExample 1: Using Promises\n// Example using Promises function fetchData() { return new Promise((resolve, reject) =\u003e { // Simulating asynchronous data fetching setTimeout(() =\u003e { const data = { message: 'Data fetched successfully!' }; resolve(data); }, 2000); }); } // Consuming the Promise fetchData() .then(data =\u003e console.log(data)) .catch(error =\u003e console.error(error)); Example 2: Aync / Awair\n// Example using Async/Await with a general callback async function fetchDataAsync() { return new Promise(resolve =\u003e { // Simulating asynchronous data fetching setTimeout(() =\u003e { const data = { message: ‚ÄòAsync data fetched successfully!‚Äô }; resolve(data); }, 1500); }); } // Consuming the Async/Await with a general callback async function getDataWithCallback(callback) { try { const data = await fetchDataAsync(); callback(null, data); // Passing the data or an error to the callback } catch (error) { callback(error, null); } } // Invoking the Async function with a callback getDataWithCallback((error, data) =\u003e { if (error) { console.error(error); } else { console.log(data); } }); 6. Memoization What: Memoization involves caching function results based on input parameters to avoid redundant calculations and enhance the performance of repetitive or resource-intensive functions.\nWhy: Drastically improves performance by storing and reusing previously calculated results.\nHow: Implement caching effortlessly in Javascript by creating a Cache object and checking results before recalculating.\n// Memoization example with factorial calculation const factorial = (function () { const cache = {}; return function memoizedFactorial(n) { if (n in cache) { return cache[n]; } else { if (n === 0 || n === 1) { return 1; } else { const result = n * memoizedFactorial(n - 1); cache[n] = result; return result; } } }; })(); console.log('Factorial of 5:', factorial(5)); 7. Event Delegation What: Event delegation optimizes handling of interactions by forwarding events through a single listener attached to a parent element, rather than attaching listeners to individual elements.\nWhy: This approach minimizes memory consumption and enhances performance, particularly in scenarios involving the creation of dynamic or numerous elements.\nHow: Embrace event delegation for efficient event handling in complex scenarios.\n// example using closest() method for event delegation document.addEventListener('click', function(event) { const button = event.target.closest('button'); if (button) { // Handle button click } }); 8. Debugging with Console What: The console object is a powerful tool for debugging, offering functions like console.log(), console.warn(), console.error(), and console.table().\nWhy: Enhances debugging capabilities, with styling options using the %c placeholder in console.log() for visually appealing messages.\nHow: Elevate your debugging workflow with advanced console features.\n// Console debugging console.log(‚ÄòThis is a log message‚Äô); console.warn(‚ÄòThis is a warning message‚Äô); console.error(‚ÄòThis is an error message‚Äô); console.table([{ name: ‚ÄòAndrea', age: 30 }, { name: 'marco', age: 25 }]); 9. Performance Optimization What: Optimize performance through techniques like minimizing DOM manipulations, reducing network requirements, and leveraging browser cache memory.\nWhy: Boosts code efficiency, with tools like the Chrome DevTools Performance tab aiding in identifying bottlenecks and optimization opportunities.\nHow: Implement performance-boosting techniques to create lightning-fast web applications. Use Performance Tab in Chrome DevTools:\nOpen your website in Google Chrome. Right-click on the page and select ‚ÄúInspect‚Äù or use Ctrl+Shift+I (Windows/Linux) or Cmd+Opt+I (Mac) to open Chrome DevTools. Navigate to the ‚ÄúPerformance‚Äù tab. Click the record button (a red circle) to start capturing performance data. Interact with your website to simulate user actions. Click the stop button (a red square) to stop recording. Reasoning on the results, you can easily identify bottlenecks and opportunities for improvement. 10. ES6 Modules What: Usage of ES6 modules introduced a native module system for JavaScript, facilitating code organization and modularity.\nWhy: Encourages code encapsulation, reuse, and enhances code maintainability.\nHow: Harness the power of import and export statements to modularize and organize your code effectively.\nNote: I know, this specific point needs a separated post because we should discuss also about a superset of JavaScript (Typescript) and also describe its advantages in term of code reusability and maintainability and, why not, link to the Object Oriented Programming (OOP) principles.\n// Exporting module export function addNumbers(a, b) { return a + b; } // Importing module import { addNumbers } from './mathUtils.js'; Conclusion JavaScript, a realm of boundless possibilities, unveils an array of potent features and techniques capable of revolutionizing your development workflow.\nThe 10 remarkable JavaScript tricks shared in this article span syntax enhancements, debugging finesse, performance optimizations, and more.\nBy assimilating these tips into your coding arsenal, pave the way to becoming a more robust and quality-wise applications.\n","description":"Frontend Mastery: 10 Javascript hacks to speedup development on frontend side...","tags":["javascript","programming","blog"],"title":"Frontend Mastery","uri":"/marcomattolab/marcomartorana/post/2020/jan/frontend-mastery/"},{"content":"Articles about learn in public, brag document and free stuffs.\nLearn In Public If there‚Äôs a golden rule, it‚Äôs this one, so I put it first. All the other rules are more or less elaborations of this rule #1.\nA habit of creating learning exhaust:\nWrite blogs and tutorials and cheatsheets. Speak at meetups and conferences. Ask and answer things on Stackoverflow or Reddit. Avoid the walled gardens like Slack and Discord, they‚Äôre not public. Make Youtube videos or Twitch streams. Start a newsletter. Draw cartoons. Link Make Free Stuff The best growth hack is still to build something people enjoy, then attaching no strings to it. You‚Äôd be surprised how far that can get you.\nMake free stuff! The web is still for everyone.\nLink\nHow to hone your new superpower: teaching I learned early in my developer journey that teaching others is an effective way to quickly deepen my understanding of a new concept or technology. I‚Äôve found that needing to articulate a particular concept to others causes me to revisit my assumptions and leads me to do additional research to fill any knowledge gaps.\nLink\nYour future self will thank you: Building your personal documentation. Developers can take a DRY approach to how they search for answers to questions they encounter multiple times. By relying on an internal database (or ‚Äúsecond brain‚Äù) they can reduce their reliance on external search engines.\nLink\nBrag now, remember later: Document your accomplishments Given five minutes notice to summarize your recent professional and personal accomplishments and wins, how detailed would your response be? Would that be enough time for you to sufficiently capture some of the things you‚Äôre most proud of from the past few months or years?\nLink\nThe most successful developers share more than they take One of the questions I always ask successful bloggers is: what motivated you to start? The answer is always the same: I did it for myself. Whatever your work, you should embrace the philosophy of ‚Äúpublic by default‚Äù.\nPublic-by-default means this: everytime you create something, learn something, or just notice something‚Äôs interesting, do it in public. This may seem daunting‚Äîwriting blog posts, helping the community and transforming ideas from thoughts into words all takes time. But sharing is like a muscle, and by committing to a regular schedule, you become much more efficient. This consistency of volume is also key to reaping the benefits of sharing.\nTo truly embrace public-by-default, it‚Äôs not enough to share your successful projects and knowledge, but additionally to bring the humility to share your learning and failures.\nLink\n","description":"Articles about learning in public, brag document and free stuffs.","tags":["informatics"],"title":"Collections No.1","uri":"/marcomattolab/marcomartorana/informatics/2023/collections/"},{"content":"Articles about learn in public, brag document and free stuffs.\nLearn In Public If there‚Äôs a golden rule, it‚Äôs this one, so I put it first. All the other rules are more or less elaborations of this rule #1.\nA habit of creating learning exhaust:\nWrite blogs and tutorials and cheatsheets. Speak at meetups and conferences. Ask and answer things on Stackoverflow or Reddit. Avoid the walled gardens like Slack and Discord, they‚Äôre not public. Make Youtube videos or Twitch streams. Start a newsletter. Draw cartoons. Link Make Free Stuff The best growth hack is still to build something people enjoy, then attaching no strings to it. You‚Äôd be surprised how far that can get you.\nMake free stuff! The web is still for everyone.\nLink\nHow to hone your new superpower: teaching I learned early in my developer journey that teaching others is an effective way to quickly deepen my understanding of a new concept or technology. I‚Äôve found that needing to articulate a particular concept to others causes me to revisit my assumptions and leads me to do additional research to fill any knowledge gaps.\nLink\nYour future self will thank you: Building your personal documentation. Developers can take a DRY approach to how they search for answers to questions they encounter multiple times. By relying on an internal database (or ‚Äúsecond brain‚Äù) they can reduce their reliance on external search engines.\nLink\nBrag now, remember later: Document your accomplishments Given five minutes notice to summarize your recent professional and personal accomplishments and wins, how detailed would your response be? Would that be enough time for you to sufficiently capture some of the things you‚Äôre most proud of from the past few months or years?\nLink\nThe most successful developers share more than they take One of the questions I always ask successful bloggers is: what motivated you to start? The answer is always the same: I did it for myself. Whatever your work, you should embrace the philosophy of ‚Äúpublic by default‚Äù.\nPublic-by-default means this: everytime you create something, learn something, or just notice something‚Äôs interesting, do it in public. This may seem daunting‚Äîwriting blog posts, helping the community and transforming ideas from thoughts into words all takes time. But sharing is like a muscle, and by committing to a regular schedule, you become much more efficient. This consistency of volume is also key to reaping the benefits of sharing.\nTo truly embrace public-by-default, it‚Äôs not enough to share your successful projects and knowledge, but additionally to bring the humility to share your learning and failures.\nLink\n","description":"Articles about learning in public, brag document and free stuffs.","tags":["informatics"],"title":"Collections No.2","uri":"/marcomattolab/marcomartorana/informatics/2023/collections2/"},{"content":"Progetto PCTO: ‚ÄúDroni - Spettacoli Coreografici e Riconoscimento Facciale in Real-Time‚Äù\nSiamo entusiasti di condividere il nostro nuovo progetto PCTO (Percorsi per le Competenze Trasversali e l‚ÄôOrientamento), realizzato dalla classe 4B Informatica e Telecomunicazioni! Questo ambizioso progetto unisce tecnologia, creativit√† e innovazione, portando la nostra scuola all‚Äôavanguardia nella sperimentazione di sistemi avanzati.\nüéØ Obiettivo del Progetto\nL‚Äôobiettivo principale √® sviluppare un sistema di spettacoli coreografici con droni in sciame e implementare un avanzato sistema di riconoscimento facciale in tempo reale. Gli studenti, guidati da tutor esperti, hanno avuto l‚Äôopportunit√† di applicare le loro conoscenze teoriche a casi d‚Äôuso reali, migliorando le loro competenze tecniche e trasversali.\nüìä Dettagli del Progetto\nClasse: 4B Informatica e Telecomunicazioni Periodo: Settembre 2024 - Giugno 2025 Tutor: Prof. Martorana Coordinatore: Prof.ssa Halo\nüë®‚Äçüéì Json\narray_dati =[ { \"data_compilazione\":\"01/06/2025\", \"tutor\":\"Prof. MMA\", \"coordinatore\":\"Prof.ssa GTE\", \"denominazione-corso\":\" 4B Informatica e telecomunicazioni Progetto Drone\", \"nome\":\"Name\", \"cognome\":\"Surname\", \"corso\":\"Informatica\", \"azienda\":\"-\", \"inizio\":\"Settembre 2024\", \"fine\":\"Giugno 2025\", \"progetto\":\"Droni: Spettacoli coreografici in sciame e sistema di riconoscimento facciale in real-time\" }, { \"data_compilazione\":\"02/06/2025\", \"tutor\":\"Prof. MMA\", \"coordinatore\":\"Prof.ssa GTE\", \"denominazione-corso\":\" 4B Informatica e telecomunicazioni Progetto Drone\", \"nome\":\"Nome\", \"cognome\":\"Cognome\", \"corso\":\"Informatica\", \"azienda\":\"-\", \"inizio\":\"Settembre 2024\", \"fine\":\"Giugno 2025\", \"progetto\":\"Droni: Spettacoli coreografici in sciame e sistema di riconoscimento facciale in real-time\" }] üí° Codice Python\n!pip install python-docx from docx import Document def compila_template(template_path, output_path, dati): \"\"\" Legge un template Word e lo compila con i dati forniti. \"\"\" # Apri il documento doc = Document(template_path) # Sostituisci i segnaposto con i dati forniti for paragrafo in doc.paragraphs: for chiave, valore in dati.items(): if f\"{{{{{chiave}}}}}\" in paragrafo.text: # Segnaposto formato {{chiave}} paragrafo.text = paragrafo.text.replace(f\"{{{{{chiave}}}}}\", valore) # Salva il documento compilato doc.save(output_path) # Esempio di utilizzo def main(): template_path = \"/content/SchedaValutazionePCTO-DR.11-PR.-7.5.1.docx\" # Percorso del template Word output_path = \"SchedaValutazionePCTO-DR.11-PR.-7.5.1.docx\" # Percorso del file compilato # Array di dati da inserire nel documento array_dati = [ { \"data_compilazione\":\"01/06/2025\", \"tutor\":\"Prof. Marco Martorana\", \"coordinatore\":\"Prof.ssa Rosa Termine\", \"denominazione-corso\":\" 4B Informatica e telecomunicazioni Progetto Drone\", \"nome\":\"Samuel\", \"cognome\":\"Jhons\", \"corso\":\"Informatica\", \"azienda\":\"-\", \"inizio\":\"Settembre 2024\", \"fine\":\"Giugno 2025\", \"progetto\":\"Droni: Spettacoli coreografici in sciame e sistema di riconoscimento facciale in real-time\" }, { \"data_compilazione\":\"01/06/2025\", \"tutor\":\"Prof. Marco Martorana\", \"coordinatore\":\"Prof.ssa Rosa Termine\", \"denominazione-corso\":\" 4B Informatica e telecomunicazioni Progetto Drone\", \"nome\":\"Jeff\", \"cognome\":\"Zend\", \"corso\":\"Informatica\", \"azienda\":\"-\", \"inizio\":\"Settembre 2024\", \"fine\":\"Giugno 2025\", \"progetto\":\"Droni: Spettacoli coreografici in sciame e sistema di riconoscimento facciale in real-time\" } ] for i, dati in enumerate(array_dati): output_file = output_path.replace(\".docx\", f\"_{i+1}.docx\") compila_template(template_path, output_file, dati) print(f\"Documento compilato salvato in: {output_file}\") if __name__ == \"__main__\": main() ","description":"Progetto Droni - Spettacoli Coreografici e Riconoscimento Facciale in Real-Time","tags":["informatics"],"title":"Progetto Drone Show","uri":"/marcomattolab/marcomartorana/informatics/2023/collections3/"},{"content":"JavaScript tips for developers Javascript, is a must to have in the modern web development, empowers developers with its versatility. As developers, we placed here tips and techniques to use daily for amplifying productivity during development of our code.\nFor this reason I‚Äôve written 4 tips for developers. Each of these tips is explained thoroughly, covering the ‚Äòwhat‚Äô (the tip itself), ‚Äòwhy‚Äô (its importance), and ‚Äòhow‚Äô (implementing it).\nFor a visual representation, check out this picture featuring a superhero, to grasp these concepts visually and make them as powerful as a superhero‚Äôs abilities. Let‚Äôs delve into the enchanting world of a frontend developer with super powers !!\n1. Loop objects What: starting to define an object as a a data structure, always we need to store and manage objects in our systems. Often we need to loop these objects by iterating over theirs properties. Below just an example of an object ¬´myTeam¬ª and its properties ( name, membersCount ‚Ä¶):\nconst myTeam= { name:‚Äôawesometeam‚Äô, membersCount: 12 , membersActive:[‚Äònamel‚Äô,‚Äôname2',‚Äôname3'], rank:‚Äô#1', description:‚Äôhelloworld‚Äô, } Why: To implement complex logic and operations efficiently a developer needs to iterate over properties of the object. This loop iterates over all enumerable properties of the object obj, getting and using each key-value pair to develop some specific tasks.\nHow: In JavaScript there are the following 4 ways to loop objects:\n‚ÄòTraditional‚Äô for loop Object.keys() Object.values() Object.entries() Traditional for loop: we can loop over the keys and access their values by referencing the object itself with the given key\nconst myTeam= { name:‚Äôawesometeam‚Äô, membersCount: 12 , membersActive:[‚Äònamel‚Äô,‚Äôname2',‚Äôname3'], rank:‚Äô#1', description:‚Äôhelloworld‚Äô, } for(const key in myTeam)‚Äπ console.log(‚Äòkey:${key},value:${myTeam[key]}‚Äô); } key:name,value:awesometeam key:membersCount, value : 12 key:membersActive, value : namel, name, name3 key:rank, value:#1 key:description,value:helloworld Object.keys(): Another way is to use Object.keys and passing the object itself as a parameter, in return we‚Äôll receive all the keys in an array through which we can iterate.\nconst myTeam= { name:‚Äôawesometeam‚Äô, membersCount: 1 2 , membersActive: [‚Äònamel‚Äô, ‚Äòname2', ‚Äòname‚Äô], rank:‚Äô#1', description:‚Äôhelloworld‚Äô } console.log(Object.keys(myTeam)); Object.keys(myTeam).forEach(key= \u003e{ console.log(‚Äòkey: ${key}, value: $(myTeam [key]}‚Äô); }) ( 5 ) [ ‚Äò name‚Äô, \"membersCount‚Äô,\"membersActive‚Äô, ‚Äò r a n k ‚Äò , ‚Äòdescription‚Äô] key:name,value:awesometeam key:membersCount,value:12 key:membersActive, value: namel, name2, name3 key:rank,value:#1 key:description,value:helloworld Object.values(): Similar to Object.keys but it returns an array of values insteadofkeys. We can loop through this values array to see for example if there is any array (special type of object) stored inside of it.\nconst myTeam= { name:‚Äôawesometeam‚Äô, membersCount: 12, membersActive: [‚Äònamel‚Äô,‚Äôname2‚Äò , ‚Äòname3'], rank:‚Äô#1' description: ‚Äòhello world‚Äô } console.log(Object.values(myTeam)); Object.values(myTeam).forEach(val=\u003e { console.log(value: ${val} type: ${typeof val}‚Äô) }) // check if any object is in the values const res= Object.values(myTeam).some(el=\u003etypeof el===‚Äôobject‚Äô); console.log(res); (5)[‚Äòawesometeam\", 12,Array(3),‚Äô#1',‚Äôhelloworld‚Äô] value:awesometeamtype:string value:1 2type:number value:namel,name2,name3type:object value:# 1type:string value:helloworldtype:string true Object.entries(): For many cases probably the most convenient solution since this method returns in an array of key value pairs.\nconst myTeam= { name:‚Äôawesometeam‚Äô, membersCount: 1 2 , membersActive: [‚Äònamel‚Äô, ‚Äòname2', ‚Äòname3'], rank:‚Äô#1', description:‚Äôhelloworld‚Äô } console.log(Object.entries(myTeam)); console.log(Object.entries(myTeam)[0];//first element key,value for(const [key,value] of Object.entries(myTeam)){ console.log (‚Äòkey: ${key}, value: ${value)‚Äô); } (5) [Array(2), Array(2), Array(2), Array(2), Array(2)] (2)[‚Äòname‚Äô,‚Äô awesometeam‚Äô] key:name,value:awesometeam key:membersCount,value:12 key:membersActive, value: name, name2, name3 key:rank,value:#1 key:description,value:helloworld 2. Search inside an array What: A developer needs to search one of more elements inside an array.\nWhy: To implement complex logic and operations efficiently and write its algorithms.\nHow: In JavaScript there are the following methods to search elements inside an array:\nfilter find includes indexOf filter: Returns a new array with elements that pass a condition given by a callback function.\nconst numbers = [1, 2, 3, 4, 5, 6]; // Using filter to get all even numbers const evenNumbers = numbers.filter(num =\u003e num % 2 === 0); console.log('Even Numbers:', evenNumbers); // [2, 4, 6] find: Returns the first element that passes the condition given by a callback function. If no element match returns undefined.\nconst numbers = [1, 2, 3, 4, 5, 6]; // Using find to get the first number greater than 3 const firstGreaterThanThree = numbers.find(num =\u003e num \u003e 3); console.log('First number greater than 3:', firstGreaterThanThree); // 4 includes: Returns true if an array contains a value otherwise return false.\nconst numbers = [1, 2, 3, 4, 5, 6]; // Using includes to check if number 5 is in the array const includesFive = numbers.includes(5); console.log('Array includes 5:', includesFive); // true indexOf: Find the first element that matches a value and return the index of that element. If not elements match return -1\nconst numbers = [1, 2, 3, 4, 5, 6]; // Using indexOf to find the index of number 4 const indexOfFour = numbers.indexOf(4); console.log('Index of 4:', indexOfFour); // 3 3. Fetch API with Promises What: The Fetch API provides a more powerful and flexible feature set for making HTTP requests.\nWhy: To get and manipulate data making HTTP requests. showcasing below shows how to make an HTTP GET request, handle the response, and manage errors appropriately.\nHow: directly deve into an example of fetching data from a public API and handling the response.\n// Fetching data from an API fetch('https://jsonplaceholder.typicode.com/posts/1') .then(response =\u003e { // Check if the response is successful if (!response.ok) { throw new Error('Network response was not ok ' + response.statusText); } return response.json(); // Parse the JSON from the response }) .then(data =\u003e { // Handle the parsed JSON data console.log('Post Title:', data.title); console.log('Post Body:', data.body); }) .catch(error =\u003e { // Handle any errors that occurred during the fetch console.error('There has been a problem with your fetch operation:', error); }); Explanation\nFetch Request: The fetch function initiates a request to the specified URL and returns a Promise that resolves to the Response object representing the response to the request. **Response Handling: .**then(response =\u003e {‚Ä¶}): The first .then is used to handle the Response object. It checks if the response was successful using response.ok. If not, it throws an error. then(data =\u003e {‚Ä¶}): The second .then handles the parsed JSON data. Here, we log the title and body of the post to the console. Error Handling: The .catch method is used to handle any errors that occur during the fetch operation, whether it‚Äôs a network error or an issue with parsing the response. 4.Cloning an Object What: Often we need to duplicate an object with its properties. This operation in JavaScript is known as cloning. Mainly we have 2 diverse cloning types: shallow clone and deep clone.\nA deep copy creates a new object and recursively copies all objects found in the original. This means that the new object and its contained objects are entirely independent of the original.\nA shallow copy creates a new object, but inserts references into it to the objects found in the original. This means that the new object is a new container populated with references to the same elements contained in the original.\nWhy: As developers we need to clone an object and work with the cloned one to don‚Äôt change original object.\nHow: Cloning an object can be done in several ways in JavaScript, each with its own trade-offs.\nShallow clone with Object.assign const obj1 = { a: 1, b: 2 }; const obj2 = Object.assign({}, obj1); console.log(obj2); // Output: { a: 1, b: 2 } Shallow Clone with Spread Operator const obj1 = { a: 1, b: 2 }; const obj2 = { ...obj1 }; console.log(obj2); // Output: { a: 1, b: 2 } Deep Clone with JSON const obj1 = { a: 1, b: { c: 2 } }; const obj2 = JSON.parse(JSON.stringify(obj1)); console.log(obj2); // Output: { a: 1, b: { c: 2 } } 5. Map and Reduce in JavaScript Map and reduce are powerful array methods in JavaScript that allow you to process and transform data efficiently. Let‚Äôs dive into what they are, why you should use them, and how to implement them with code snippets.\nWhat: The map method creates a new array populated with the results of calling a provided function on every element in the calling array.\nWhy: map is useful for transforming data without mutating the original array. It‚Äôs perfect for scenarios where you need to apply a consistent operation to all items in an array.\nHow: Here‚Äôs a simple example of how to use map to convert an array of numbers to their squares. In this example, map takes a function that squares each number and applies it to every element in the numbers array, producing a new array squares.\nconst numbers = [1, 2, 3, 4, 5]; const squares = numbers.map(num =\u003e num * num); console.log(squares); // Output: [1, 4, 9, 16, 25] What: The reduce method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.\nWhy: reduce is ideal for aggregating or summarizing the data in an array. It‚Äôs commonly used for tasks like summing numbers, finding averages, or concatenating strings.\nHow: In this example, reduce processes the numbers array, adding each element to the accumulator, starting from an initial value of 0. The final result is the sum of all numbers in the array.\nconst numbers = [1, 2, 3, 4, 5]; const sum = numbers.reduce((accumulator, currentValue) =\u003e accumulator + currentValue, 0); console.log(sum); // Output: 15 Combining Map and Reduce\nYou can combine map and reduce to perform complex data transformations and aggregations in a concise manner.\nconst numbers = [1, 2, 3, 4, 5]; const doubledSum = numbers .map(num =\u003e num * 2) .reduce((accumulator, currentValue) =\u003e accumulator + currentValue, 0); console.log(doubledSum); // Output: 30 Combining these methods allows for powerful data processing pipelines, making code more readable and maintainable.\nAbove an example where we first double the numbers in an array using map, and then sum the doubled values using reduce.\n","description":"In this article a collection of JavaScript tips for frontend developers...","tags":["javascript","blog","programming"],"title":"JavaScript tips for developers","uri":"/marcomattolab/marcomartorana/post/2020/jan/javascript-tips-for-developers/"},{"content":"Journaling is not just a little thing you do to pass the time, to write down your memories‚Äîthough it can be‚Äîit‚Äôs a strategy that has helped brilliant, powerful and wise people become better at what they do.\n","title":"Note 1","uri":"/marcomattolab/marcomartorana/notes/2020/change/"},{"content":"Journaling is not just a little thing you do to pass the time, to write down your memories‚Äîthough it can be‚Äîit‚Äôs a strategy that has helped brilliant, powerful and wise people become better at what they do.\n","title":"Note 2","uri":"/marcomattolab/marcomartorana/notes/2020/change2/"},{"content":"Journaling is not just a little thing you do to pass the time, to write down your memories‚Äîthough it can be‚Äîit‚Äôs a strategy that has helped brilliant, powerful and wise people become better at what they do.\n","title":"Note 3","uri":"/marcomattolab/marcomartorana/notes/2020/change3/"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube privacy enhanced shortcode The youtube shortcode embeds a responsive video player for YouTube videos. Only the ID of the video is required, e.g.:\nYouTube URL:\nhttps://www.youtube.com/watch?v=3qHkcs3kG44 Shortcode:\n{{\u003c youtube 3qHkcs3kG44 \u003e}} Rendered output: Twitter You want to include a single tweet into your blog post? Everything you need is the URL of the tweet:\nTwitter url:\nhttps://twitter.com/binovarghese_/status/1758148486510317907 Shortcode:\n{{\u003c twitter user=\"binovarghese_\" id=\"1758148486510317907\" \u003e}} Rendered: I‚Äôm a night owl who loves the dark hours. I often go for walks at night, enjoying the city lights, the yellow glow, and the people around me.\nHere are some photos I took from the night walks in Bahrain#photography #Bahrainhttps://t.co/OzoJjNRH67\n‚Äî Bino Kochumol Varghese ‚ö° (@binovarghese_) February 15, 2024 ","description":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable.","tags":["hugo","shortcodes"],"title":"Rich Content","uri":"/marcomattolab/marcomartorana/post/2020/jan/rich-content/"},{"content":"You can host your static website wth zero cost in Netlify.\nAdd the below netlify.toml in the root folder.\n[build] publish = \"public\" command = \"hugo --gc --minify\" [context.production.environment] HUGO_VERSION = \"0.82.0\" HUGO_ENV = \"production\" HUGO_ENABLEGITINFO = \"true\" [context.split1] command = \"hugo --gc --minify --enableGitInfo\" [context.split1.environment] HUGO_VERSION = \"0.82.0\" HUGO_ENV = \"production\" [context.deploy-preview] command = \"hugo --gc --minify --buildFuture -b $DEPLOY_PRIME_URL\" [context.deploy-preview.environment] HUGO_VERSION = \"0.82.0\" [context.branch-deploy] command = \"hugo -b $DEPLOY_PRIME_URL\" [context.branch-deploy.environment] HUGO_VERSION = \"0.82.0\" [context.next.environment] HUGO_ENABLEGITINFO = \"true\" And you can upload the public folder directly to Netlify or integrate your GitHub accout with Netlify to host your website.\n","description":"You can host your static website wth zero cost in Netlify. Add the below netlify.toml in the root. And you can upload the public folder directly...","tags":["hugo","Netlify"],"title":"Host in Netlify","uri":"/marcomattolab/marcomartorana/post/2020/jan/netlify-conf/"}]
